@page "/import"
@using MHRTalismanManager.Shared
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@inject HttpClient _http
@inject ILocalStorageService _localStorage

<Tabs Pills="true" FullWidth="true" Justified="true" SelectedTab="@_selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
    <Items>
        <Tab Name="@DefaultTab">Files</Tab>
        <Tab Name="mhriseWikiDb">mhrise.wiki-db.com</Tab>
    </Items>
    <Content>
        <TabPanel Name="@DefaultTab">
            <Validations @ref="_fileImportValidationRef" Mode="ValidationMode.Manual" Model="@_fileImportModel" ValidateOnLoad="false">
                <ValidationSummary/>
                <Validation @ref="_fileImportUploadValidationRef" Validator="@ValidateFileImport">
                    <Field>
                        <FieldLabel>Screenshots (max 500KB per file, jpeg only)</FieldLabel>
                        <FileEdit Multiple="true" Filter="Image/jpeg" Changed="@InputFilesChanged" AutoReset="false"></FileEdit>
                    </Field>
                </Validation>
                <Field>
                    <Check TValue="bool" @bind-Checked="@_fileImportModel.OverwriteExistingCollection">Overwrite existing collection</Check>
                </Field>
                <Button Type="ButtonType.Submit" Color="Color.Primary" Clicked="@ImportFiles" Disabled="@_isImporting">Import</Button>
            </Validations>
        </TabPanel>
        <TabPanel Name="mhriseWikiDb">
            <Tabs Pills="true" TabPosition="TabPosition.Left" SelectedTab="@_selectedMhriseWikiDbTab" SelectedTabChanged="name => _selectedMhriseWikiDbTab = name">
                <Items>
                    <Tab Name="@DefaultMhriseWikiDbTab">Import</Tab>
                    <Tab Name="export">Export</Tab>
                </Items>
                <Content>
                    <TabPanel Name="@DefaultMhriseWikiDbTab">
                        <Validations Mode="ValidationMode.Auto" Model="@_mhRiseWikiDbImportModel" ValidateOnLoad="false">
                            <ValidationSummary/>
                            <Validation>
                                <Field>
                                    <FieldLabel>Data</FieldLabel>
                                    <MemoEdit Rows="10" @bind-Text="_mhRiseWikiDbImportModel.Data"></MemoEdit>
                                </Field>
                            </Validation>
                            <Field>
                                <Check TValue="bool" @bind-Checked="@_mhRiseWikiDbImportModel.OverwriteExistingCollection">Overwrite existing collection</Check>
                            </Field>
                            <Button Type="ButtonType.Submit" Color="Color.Primary" Clicked="@ImportFromWikiDb" Disabled="@_isImporting">Import</Button>
                        </Validations>
                    </TabPanel>
                    <TabPanel Name="export">
                        <Field>
                            <Button Type="ButtonType.Button" Color="Color.Primary" Clicked="@ExportToWikiDb" Disabled="@_isImporting">Export</Button>
                        </Field>
                        <Field>
                            <FieldLabel>Data</FieldLabel>
                            <MemoEdit Rows="10" Text="@_mhRiseWikiDbExportString"></MemoEdit>
                        </Field>
                    </TabPanel>
                </Content>
            </Tabs>
        </TabPanel>
    </Content>
</Tabs>
<Modal @ref="_importResultModalRef" Closing="@CancelClosing">
    <ModalContent Size="ModalSize.ExtraLarge" Centered="true">
        <ModalHeader>
            <ModalTitle>Import Result</ModalTitle>
            <CloseButton></CloseButton>
        </ModalHeader>
        <ModalBody>
            <Steps SelectedStep="@_activeImportStep" SelectedStepChanged="@(() => { })">
                <Items>
                    <Step Name="@ImportProgressStep" Completed="@_importProgresssStepCompleted">Extracting data</Step>
                    <Step Name="@ReviewDataStep" Completed="@_reviewDataStepCompleted">Review data</Step>
                    <Step Name="@ProcessingProgressStep" Completed="@_processingProgressStepCompleted">Evaluate talismans</Step>
                </Items>
                <Content>
                    <StepPanel Name="@ImportProgressStep">
                        <Progress>
                            <ProgressBar Value="@_fileProgress" Striped="@_fileProgressIndeterminate" Animated="@_fileProgressIndeterminate"></ProgressBar>
                        </Progress>
                    </StepPanel>
                    <StepPanel Name="@ReviewDataStep">
                        <Fields>
                            <DataGrid TItem="Talisman" Data="@_importResult" ShowPager="true">
                                <DataGridColumn TItem="Talisman" Field="@($"{nameof(Talisman.Skill1)}.{nameof(TalismanSkill.Name)}")" Caption="Skill 1" Sortable="true"/>
                                <DataGridNumericColumn TItem="Talisman" Field="@($"{nameof(Talisman.Skill1)}.{nameof(TalismanSkill.Points)}")" Caption="Lvl" Sortable="true"/>
                                <DataGridColumn TItem="Talisman" Field="@($"{nameof(Talisman.Skill2)}.{nameof(TalismanSkill.Name)}")" Caption="Skill 2" Sortable="true"/>
                                <DataGridNumericColumn TItem="Talisman" Field="@($"{nameof(Talisman.Skill2)}.{nameof(TalismanSkill.Points)}")" Caption="Lvl" Sortable="true"/>
                                <DataGridColumn TItem="Talisman" Field="@nameof(Talisman.Slot1)" Caption="Slot 1" Sortable="true">
                                    <DisplayTemplate>
                                        @context.Slot1.GetDisplayName()
                                    </DisplayTemplate>
                                </DataGridColumn>
                                <DataGridColumn TItem="Talisman" Field="@nameof(Talisman.Slot2)" Caption="Slot 2" Sortable="true">
                                    <DisplayTemplate>
                                        @context.Slot2.GetDisplayName()
                                    </DisplayTemplate>
                                </DataGridColumn>
                                <DataGridColumn TItem="Talisman" Field="@nameof(Talisman.Slot3)" Caption="Slot 3" Sortable="true">
                                    <DisplayTemplate>
                                        @context.Slot3.GetDisplayName()
                                    </DisplayTemplate>
                                </DataGridColumn>
                            </DataGrid>
                            <Field>
                                <Button Type="ButtonType.Button" Color="Color.Primary" Block="true" Clicked="@AcceptImportResult">Continue</Button>
                            </Field>
                        </Fields>
                    </StepPanel>
                    <StepPanel Name="@ProcessingProgressStep"></StepPanel>
                </Content>
            </Steps>
        </ModalBody>
    </ModalContent>
</Modal>

@code {
    private const string DefaultTab = "files";
    private const string DefaultMhriseWikiDbTab = "import";
    private const string ImportProgressStep = "importProgress";
    private const string ReviewDataStep = "reviewData";
    private const string ProcessingProgressStep = "processingProgress";
    private const string TalismanDataKey = "talismans";
    private string _mhRiseWikiDbExportString = string.Empty;
    private bool _fileProgressIndeterminate;
    private string _selectedTab = DefaultTab;
    private string _selectedMhriseWikiDbTab = DefaultMhriseWikiDbTab;
    private Modal _importResultModalRef;
    private Validations _fileImportValidationRef;
    private Validation _fileImportUploadValidationRef;
    private readonly FileImportModel _fileImportModel = new();
    private readonly MhRiseWikiDbImportModel _mhRiseWikiDbImportModel = new();
    private int? _currentFile;
    private int _fileProgress;
    private bool _overwriteExistingCollection;
    private bool _isImporting;
    private string _activeImportStep = ImportProgressStep;
    private bool _importProgresssStepCompleted;
    private bool _reviewDataStepCompleted;
    private bool _processingProgressStepCompleted;
    private readonly List<Talisman> _importResult = new();

    public class FileImportModel
    {
        public IReadOnlyList<IFileEntry> Files { get; set; } = new List<IFileEntry>();

        public bool OverwriteExistingCollection { get; set; } = false;
    }

    public class MhRiseWikiDbImportModel
    {
        [Required]
        public string Data { get; set; }

        public bool OverwriteExistingCollection { get; set; } = false;
    }

    private void ValidateFileImport(ValidatorEventArgs e)
    {
        if (_fileImportModel.Files.Count == 0)
        {
            e.ErrorText = "No files selected";
            e.Status = ValidationStatus.Error;
        }
        else if (_fileImportModel.Files.Any(f => f.Size > 500000))
        {
            e.ErrorText = "Files should not be bigger than 500KB";
            e.Status = ValidationStatus.Error;
        }
        else
        {
            e.ErrorText = null;
            e.Status = ValidationStatus.Success;
        }
    }

    private async void ImportFiles()
    {
        if (!_fileImportValidationRef.ValidateAll())
        {
            return;
        }

        _importProgresssStepCompleted = false;
        _reviewDataStepCompleted = false;
        _processingProgressStepCompleted = false;
        _fileProgressIndeterminate = false;
        _isImporting = true;
        _activeImportStep = ImportProgressStep;
        _importResult.Clear();
        _importResultModalRef.Show();

        try
        {
            for (var i = 0; i < _fileImportModel.Files.Count; i++)
            {
                var file = _fileImportModel.Files[i];
                _currentFile = i + 1;
                _fileProgress = (int)((double)_currentFile / _fileImportModel.Files.Count * 100);
                StateHasChanged();

                var talisman = await ProcessFile(file);
                _importResult.Add(talisman);
            }

            _overwriteExistingCollection = _fileImportModel.OverwriteExistingCollection;
            _activeImportStep = ReviewDataStep;
            _importProgresssStepCompleted = true;
        }
        finally
        {
            _fileProgress = 0;
            _isImporting = false;
            StateHasChanged();
        }
    }

    private void ImportFromWikiDb()
    {
        _importProgresssStepCompleted = false;
        _reviewDataStepCompleted = false;
        _processingProgressStepCompleted = false;
        _importResult.Clear();
        _isImporting = true;
        _fileProgressIndeterminate = true;
        _currentFile = null;
        _importResultModalRef.Show();

        try
        {
            var talismans = MhRiseWikiDbSerializer.Deserialize(_mhRiseWikiDbImportModel.Data);

            _importResult.AddRange(talismans);

            _overwriteExistingCollection = _mhRiseWikiDbImportModel.OverwriteExistingCollection;
            _activeImportStep = ReviewDataStep;
            _importProgresssStepCompleted = true;
        }
        finally
        {
            _isImporting = false;
            StateHasChanged();
        }
    }

    private async void ExportToWikiDb()
    {
        if (!await _localStorage.ContainKeyAsync(TalismanDataKey))
        {
            return;
        }

        var talismanData = JsonSerializer.Deserialize<List<Talisman>>(await _localStorage.GetItemAsStringAsync(TalismanDataKey));

        _mhRiseWikiDbExportString = MhRiseWikiDbSerializer.Serialize(talismanData);
        StateHasChanged();
    }

    private async Task<Talisman> ProcessFile(IFileEntry file)
    {
        var response = await _http.PostAsync("/ocr", new StreamContent(file.OpenReadStream()));

        response.EnsureSuccessStatusCode();

        return await response.Content.ReadFromJsonAsync<Talisman>();
    }

    private void InputFilesChanged(FileChangedEventArgs e)
    {
        _fileImportModel.Files = e.Files;
        _fileImportUploadValidationRef.Validate();
    }

    private static void CancelClosing(ModalClosingEventArgs e)
    {
        if (e.CloseReason != CloseReason.UserClosing)
            e.Cancel = true;
    }

    private void OnSelectedTabChanged(string name)
    {
        _selectedTab = name;
    }

    private async Task AcceptImportResult()
    {
        if (_overwriteExistingCollection || !await _localStorage.ContainKeyAsync(TalismanDataKey))
        {
            await _localStorage.SetItemAsync(TalismanDataKey, JsonSerializer.Serialize(_importResult));
        }
        else
        {
            var existingData = JsonSerializer.Deserialize<List<Talisman>>(await _localStorage.GetItemAsStringAsync(TalismanDataKey)) ?? new List<Talisman>();
            existingData.AddRange(_importResult);
            await _localStorage.SetItemAsync(TalismanDataKey, JsonSerializer.Serialize(existingData));
        }

        _importResultModalRef.Hide();
    }

}